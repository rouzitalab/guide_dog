;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;//#include <alcd.h>
;#include <stdio.h>
;#include <delay.h>
;
;unsigned int counterVal = 0;
;char sonar1Busy, sonar2Busy = 0;
;char sonar1DataValid, sonar2DataValid = 0;
;
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 000B {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000C     static char intFlag = 0;
; 0000 000D     if(!intFlag){
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 000E         MCUCR &= ~(1<<2);         //setting INT1 on the falling edge       => check with MCUCR = 0x08 (original 0x0b)
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 000F         intFlag = 1;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0010         TCNT1 = 0x00;         // the TCNT1 register is cleared  (increments with each clock pulse)
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0011         TCCR1B = 0x01;        // timer/counter enabled [frequency set to Xtal freq (16MHz)]
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0012     }else{
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0013         TCCR1B = 0x00;        // timer/counter disabled
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0014         MCUCR |= (1<<2);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0015         intFlag = 0;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0016         counterVal = TCNT1;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0017         sonar1Busy = 0;
;PCODE: $00000026 VOL: 0
; 0000 0018         sonar1DataValid = 1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0019     }
;PCODE: $00000029 VOL: 0
; 0000 001A }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 001D {
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 001E     static char intFlag = 0;
; 0000 001F     if(!intFlag){
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0020         MCUCR &= ~(1<<0);         //setting INT0 on the falling edge
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0021         intFlag = 1;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0022         TCNT1 = 0x00;         // the TCNT1 register is cleared  (increments with each clock pulse)
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0023         TCCR1B = 0x01;        // timer/counter enabled [frequency set to Xtal freq (16MHz)]
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0024     }else{
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0025         TCCR1B = 0x00;        // timer/counter disabled
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0026         MCUCR |= (1<<0);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0027         intFlag = 0;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0028         counterVal = TCNT1;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0029         sonar2Busy = 0;
;PCODE: $00000046 VOL: 0
; 0000 002A         sonar2DataValid = 1;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 002B     }
;PCODE: $00000049 VOL: 0
; 0000 002C }
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)      /// bayad shart bezarim ke befahme kodoomo 0 kone      ***???***
; 0000 002F {
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0030     sonar1Busy = 0;
;PCODE: $0000004F VOL: 0
; 0000 0031     sonar1DataValid = 0;
;PCODE: $00000050 VOL: 0
; 0000 0032     sonar2Busy = 0;
;PCODE: $00000051 VOL: 0
; 0000 0033     sonar2DataValid = 0;
;PCODE: $00000052 VOL: 0
; 0000 0034 }
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;
;void trig1(){                 //aparently this sonar triggers on the low level
; 0000 0036 void trig1(){
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0037     PORTB &= ~(1<<0);       //set bit 0 to 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0038     delay_us(20);
;PCODE: $0000005A VOL: 0
; 0000 0039     PORTB |= (1<<0);        //set bit 0 to 1
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 003A     sonar1Busy = 1;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 003B }
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;void trig2(){                 //aparently this sonar triggers on the low level
; 0000 003C void trig2(){
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 003D     PORTB &= ~(1<<1);       //set bit 1 to 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 003E     delay_us(20);
;PCODE: $00000065 VOL: 0
; 0000 003F     PORTB |= (1<<1);        //set bit 1 to 1
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0040     sonar2Busy = 1;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0041 }
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;
;void move(char direction)
; 0000 0044 {
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0045     if(direction == 'l') PORTC = 0b00001010;
;PCODE: $0000006E VOL: 0
;	direction -> Y+0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0046     else if(direction == 'r') PORTC = 0b00000101;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0047     else if(direction == 'f') PORTC = 0b00001001;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0048     else if(direction == 'b') PORTC = 0b00000110;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0049 }
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;
;float dist_calc(unsigned char sonar_num)
; 0000 004C {
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 004D     float distance;
; 0000 004E     if (sonar_num == 1)
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;	sonar_num -> Y+4
;	distance -> Y+0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 004F     {
; 0000 0050         trig1();
;PCODE: $00000097 VOL: 0
; 0000 0051         #asm("sei")
;PCODE: $00000098 VOL: 0
	sei
;PCODE: $00000099 VOL: 0
; 0000 0052         while(sonar1Busy);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0053         if(sonar1DataValid){
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0054             #asm("cli")
;PCODE: $000000A1 VOL: 0
	cli
;PCODE: $000000A2 VOL: 0
; 0000 0055             distance = counterVal/16.0;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0056             distance = distance/56.0;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0057         }
; 0000 0058     }
;PCODE: $000000AD VOL: 0
; 0000 0059     else
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 005A     {
; 0000 005B         trig2();
;PCODE: $000000B0 VOL: 0
; 0000 005C         #asm("sei")
;PCODE: $000000B1 VOL: 0
	sei
;PCODE: $000000B2 VOL: 0
; 0000 005D         while(sonar2Busy);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 005E         if(sonar2DataValid){
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 005F             #asm("cli")
;PCODE: $000000BA VOL: 0
	cli
;PCODE: $000000BB VOL: 0
; 0000 0060             distance = counterVal/16.0;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0061             distance = distance/56.0;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0062         }
; 0000 0063     }
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0064     return distance;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0065 }
;PCODE: $000000CB VOL: 0
;
;void main(void)
; 0000 0068 {
;PCODE: $000000CC VOL: 0
; 0000 0069 
; 0000 006A     // Input/Output Ports initialization
; 0000 006B     // Port A initialization
; 0000 006C     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 006D     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 006E     PORTA=0x00;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 006F     DDRA=0x00;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 0070 
; 0000 0071     // Port B initialization
; 0000 0072     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=Out
; 0000 0073     // State7=T State6=T State5=T State4=T State3=T State2=T State1=0 State0=0
; 0000 0074     PORTB=0x00;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 0075     DDRB=0x03;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0076 
; 0000 0077     // Port C initialization
; 0000 0078     // Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0079     // State7=T State6=T State5=T State4=T State3=0 State2=0 State1=0 State0=0
; 0000 007A     PORTC=0x00;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 007B     DDRC=0x0F;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 007C 
; 0000 007D     // Port D initialization
; 0000 007E     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 007F     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0080     PORTD=0x00;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0081     DDRD=0x00;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0082 
; 0000 0083     // Timer/Counter 1 initialization
; 0000 0084     // Clock source: System Clock
; 0000 0085     // Clock value: Timer1 Stopped
; 0000 0086     // Mode: Normal top=0xFFFF
; 0000 0087     // OC1A output: Discon.
; 0000 0088     // OC1B output: Discon.
; 0000 0089     // Noise Canceler: Off
; 0000 008A     // Input Capture on Falling Edge
; 0000 008B     // Timer1 Overflow Interrupt: Off
; 0000 008C     // Input Capture Interrupt: Off
; 0000 008D     // Compare A Match Interrupt: Off
; 0000 008E     // Compare B Match Interrupt: Off
; 0000 008F     TCCR1A=0x00;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0090     TCCR1B=0x00;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0091     TCNT1H=0x00;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0092     TCNT1L=0x00;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0093     ICR1H=0x00;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 0094     ICR1L=0x00;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 0095     OCR1AH=0x00;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0096     OCR1AL=0x00;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0097     OCR1BH=0x00;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 0098     OCR1BL=0x00;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0099 
; 0000 009A     // External Interrupt(s) initialization
; 0000 009B     // INT0: On
; 0000 009C     // INT1: On
; 0000 009D     // INT1 Mode: Rising Edge
; 0000 009E     // INT2: Off
; 0000 009F     GICR|=0xC0;                    //enable INT1 and INT0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00A0     MCUCR=0x0F;                    // set both on rising edge
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00A1     MCUCSR=0x00;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00A2     GIFR=0xC0;                     // INT1 and INT0 FLAG
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00A3 
; 0000 00A4     DDRB |= (1<<0);        //set PB0 to output [attached to sonar1 trig]
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00A5     DDRB |= (1<<1);        //set PB1 to output [attached to sonar2 trig]
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00A6 
; 0000 00A7     TIMSK=0x04;            //enable timer overflow interupt
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00A8 
; 0000 00A9     while(1)
;PCODE: $00000100 VOL: 0
; 0000 00AA     {
; 0000 00AB      /******************mesal***************/
; 0000 00AC      move('f');
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00AD      while(dist_calc(1)<20);
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00AE      while(dist_calc(1)<20)
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00AF      {
; 0000 00B0          move('r');
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00B1          delay_ms(100);
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00B2          move('f');
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00B3          delay_ms(100);
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00B4          move('l');
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00B5          delay_ms(100);
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00B6      }
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00B7     }
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00B8 
; 0000 00B9 }
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;
;        /*
;        trig2();
;        #asm("sei")             //enable interupts
;        while(sonar2Busy);       //goes to INT0 when sonar sends pulse (PD4 INT0 rising edge)
;        if(sonar2DataValid){
;            #asm("cli")         //disable interupts (there might be a noise signal which takes the program
;                                // to an interupt routine again before previous calculations are done)
;            distance2 = counterVal/16.0;     //micro seconds that took the signal to come back to the sonar since it was transmitted
;            distance2 = distance2/56.0;       //calculating distance => try 58 (for temperature 23)
;            printf("d2: %f\n\r",distance2);
;        }
;        */
