
AVRASM ver. 2.1.30  E:\Documents\AUT\Project\SRF05-2taE\List\SRF05 #2.asm Sun Mar 16 16:22:12 2014

E:\Documents\AUT\Project\SRF05-2taE\List\SRF05 #2.asm(1059): warning: Register r4 already defined by the .DEF directive
E:\Documents\AUT\Project\SRF05-2taE\List\SRF05 #2.asm(1060): warning: Register r7 already defined by the .DEF directive
E:\Documents\AUT\Project\SRF05-2taE\List\SRF05 #2.asm(1061): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega32
                 ;Program type             : Application
                 ;Clock frequency          : 16.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 512 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2143
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _counterVal=R4
                 	.DEF _sonarBusy=R7
                 	.DEF _sonarDataValid=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0040 	JMP  __RESET
000002 940c 0070 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0095 	JMP  _timer1_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0xD:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
                 _0x0:
000035 6173
000036 616c
000037 006d
000038 3a64      	.DB  0x73,0x61,0x6C,0x61,0x6D,0x0,0x64,0x3A
000039 2520
00003a 0a66
00003b 000d      	.DB  0x20,0x25,0x66,0xA,0xD,0x0
                 
                 __GLOBAL_INI_TBL:
00003c 0004      	.DW  0x04
00003d 0004      	.DW  0x04
00003e 0066      	.DW  _0xD*2
                 
                 _0xFFFFFFFF:
00003f 0000      	.DW  0
                 
                 __RESET:
000040 94f8      	CLI
000041 27ee      	CLR  R30
000042 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000043 e0f1      	LDI  R31,1
000044 bffb      	OUT  GICR,R31
000045 bfeb      	OUT  GICR,R30
000046 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000047 e1f8      	LDI  R31,0x18
000048 bdf1      	OUT  WDTCR,R31
000049 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00004a e08d      	LDI  R24,(14-2)+1
00004b e0a2      	LDI  R26,2
00004c 27bb      	CLR  R27
                 __CLEAR_REG:
00004d 93ed      	ST   X+,R30
00004e 958a      	DEC  R24
00004f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000050 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000051 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000052 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000053 93ed      	ST   X+,R30
000054 9701      	SBIW R24,1
000055 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000056 e7e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000057 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000058 9185      	LPM  R24,Z+
000059 9195      	LPM  R25,Z+
00005a 9700      	SBIW R24,0
00005b f061      	BREQ __GLOBAL_INI_END
00005c 91a5      	LPM  R26,Z+
00005d 91b5      	LPM  R27,Z+
00005e 9005      	LPM  R0,Z+
00005f 9015      	LPM  R1,Z+
000060 01bf      	MOVW R22,R30
000061 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000062 9005      	LPM  R0,Z+
000063 920d      	ST   X+,R0
000064 9701      	SBIW R24,1
000065 f7e1      	BRNE __GLOBAL_INI_LOOP
000066 01fb      	MOVW R30,R22
000067 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000068 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000069 bfed      	OUT  SPL,R30
00006a e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006b bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006c e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006d e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006e 940c 009c 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;//#include <alcd.h>
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;
                 ;unsigned int counterVal = 0;
                 ;char sonarBusy = 0;
                 ;char sonarDataValid = 0;
                 ;
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 000B {
                 
                 	.CSEG
                 _ext_int0_isr:
000070 93ea      	ST   -Y,R30
000071 93fa      	ST   -Y,R31
000072 b7ef      	IN   R30,SREG
000073 93ea      	ST   -Y,R30
                 ; 0000 000C     static char intFlag = 0;
                 ; 0000 000D     if(!intFlag){
000074 91e0 0260 	LDS  R30,_intFlag_S0000000000
000076 30e0      	CPI  R30,0
000077 f461      	BRNE _0x3
                 ; 0000 000E         MCUCR = 0x02;         //setting INT0 on the falling edge       => check with MCUCR = 0x08 (original 0x0b)
000078 e0e2      	LDI  R30,LOW(2)
000079 bfe5      	OUT  0x35,R30
                 ; 0000 000F         intFlag = 1;
00007a e0e1      	LDI  R30,LOW(1)
00007b 93e0 0260 	STS  _intFlag_S0000000000,R30
                 ; 0000 0010         TCNT1 = 0x00;         // the TCNT1 register is cleared  (increments with each clock pulse)
00007d e0e0      	LDI  R30,LOW(0)
00007e e0f0      	LDI  R31,HIGH(0)
00007f bdfd      	OUT  0x2C+1,R31
000080 bdec      	OUT  0x2C,R30
                 ; 0000 0011         TCCR1B = 0x01;        // timer/counter enabled [frequency set to Xtal freq (16MHz)]
000081 e0e1      	LDI  R30,LOW(1)
000082 bdee      	OUT  0x2E,R30
                 ; 0000 0012     }else{
000083 c00c      	RJMP _0x4
                 _0x3:
                 ; 0000 0013         TCCR1B = 0x00;        // timer/counter disabled
000084 e0e0      	LDI  R30,LOW(0)
000085 bdee      	OUT  0x2E,R30
                 ; 0000 0014         MCUCR=0x03;
000086 e0e3      	LDI  R30,LOW(3)
000087 bfe5      	OUT  0x35,R30
                 ; 0000 0015         intFlag = 0;
000088 e0e0      	LDI  R30,LOW(0)
000089 93e0 0260 	STS  _intFlag_S0000000000,R30
                 ; 0000 0016         counterVal = TCNT1;
                +
00008b b44c     +IN R4 , 44
00008c b45d     +IN R5 , 44 + 1
                 	__INWR 4,5,44
                 ; 0000 0017         sonarBusy = 0;
00008d 2477      	CLR  R7
                 ; 0000 0018         sonarDataValid = 1;
00008e e0e1      	LDI  R30,LOW(1)
00008f 2e6e      	MOV  R6,R30
                 ; 0000 0019     }
                 _0x4:
                 ; 0000 001A }
000090 91e9      	LD   R30,Y+
000091 bfef      	OUT  SREG,R30
000092 91f9      	LD   R31,Y+
000093 91e9      	LD   R30,Y+
000094 9518      	RETI
                 ;
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 001D {
                 _timer1_ovf_isr:
000095 93ea      	ST   -Y,R30
000096 b7ef      	IN   R30,SREG
                 ; 0000 001E     sonarBusy = 0;
000097 2477      	CLR  R7
                 ; 0000 001F     sonarDataValid = 0;
000098 2466      	CLR  R6
                 ; 0000 0020 }
000099 bfef      	OUT  SREG,R30
00009a 91e9      	LD   R30,Y+
00009b 9518      	RETI
                 ;
                 ;void trig();
                 ;
                 ;void main(void)
                 ; 0000 0025 {
                 _main:
                 ; 0000 0026     float distance;
                 ; 0000 0027     // Timer/Counter 1 initialization
                 ; 0000 0028     // Clock source: System Clock
                 ; 0000 0029     // Clock value: Timer1 Stopped
                 ; 0000 002A     // Mode: Normal top=0xFFFF
                 ; 0000 002B     // OC1A output: Discon.
                 ; 0000 002C     // OC1B output: Discon.
                 ; 0000 002D     // Noise Canceler: Off
                 ; 0000 002E     // Input Capture on Falling Edge
                 ; 0000 002F     // Timer1 Overflow Interrupt: Off
                 ; 0000 0030     // Input Capture Interrupt: Off
                 ; 0000 0031     // Compare A Match Interrupt: Off
                 ; 0000 0032     // Compare B Match Interrupt: Off
                 ; 0000 0033     TCCR1A=0x00;
00009c 9724      	SBIW R28,4
                 ;	distance -> Y+0
00009d e0e0      	LDI  R30,LOW(0)
00009e bdef      	OUT  0x2F,R30
                 ; 0000 0034     TCCR1B=0x00;
00009f bdee      	OUT  0x2E,R30
                 ; 0000 0035     TCNT1H=0x00;
0000a0 bded      	OUT  0x2D,R30
                 ; 0000 0036     TCNT1L=0x00;
0000a1 bdec      	OUT  0x2C,R30
                 ; 0000 0037     ICR1H=0x00;
0000a2 bde7      	OUT  0x27,R30
                 ; 0000 0038     ICR1L=0x00;
0000a3 bde6      	OUT  0x26,R30
                 ; 0000 0039     OCR1AH=0x00;
0000a4 bdeb      	OUT  0x2B,R30
                 ; 0000 003A     OCR1AL=0x00;
0000a5 bdea      	OUT  0x2A,R30
                 ; 0000 003B     OCR1BH=0x00;
0000a6 bde9      	OUT  0x29,R30
                 ; 0000 003C     OCR1BL=0x00;
0000a7 bde8      	OUT  0x28,R30
                 ; 0000 003D 
                 ; 0000 003E     // External Interrupt(s) initialization
                 ; 0000 003F     // INT0: Off
                 ; 0000 0040     // INT1: On
                 ; 0000 0041     // INT1 Mode: Rising Edge
                 ; 0000 0042     // INT2: Off
                 ; 0000 0043     GICR|=0x40;                    //enable INT0
0000a8 b7eb      	IN   R30,0x3B
0000a9 64e0      	ORI  R30,0x40
0000aa bfeb      	OUT  0x3B,R30
                 ; 0000 0044     MCUCR=0x03;                    // set on rising edge
0000ab e0e3      	LDI  R30,LOW(3)
0000ac bfe5      	OUT  0x35,R30
                 ; 0000 0045     MCUCSR=0x00;
0000ad e0e0      	LDI  R30,LOW(0)
0000ae bfe4      	OUT  0x34,R30
                 ; 0000 0046     GIFR=0x40;                     // INT0 FLAG
0000af e4e0      	LDI  R30,LOW(64)
0000b0 bfea      	OUT  0x3A,R30
                 ; 0000 0047 
                 ; 0000 0048     // USART initialization
                 ; 0000 0049     // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 004A     // USART Receiver: Off
                 ; 0000 004B     // USART Transmitter: On
                 ; 0000 004C     // USART Mode: Asynchronous
                 ; 0000 004D     // USART Baud Rate: 9600
                 ; 0000 004E     UCSRA=0x00;
0000b1 e0e0      	LDI  R30,LOW(0)
0000b2 b9eb      	OUT  0xB,R30
                 ; 0000 004F     UCSRB=0x08;
0000b3 e0e8      	LDI  R30,LOW(8)
0000b4 b9ea      	OUT  0xA,R30
                 ; 0000 0050     UCSRC=0x86;
0000b5 e8e6      	LDI  R30,LOW(134)
0000b6 bde0      	OUT  0x20,R30
                 ; 0000 0051     UBRRH=0x00;
0000b7 e0e0      	LDI  R30,LOW(0)
0000b8 bde0      	OUT  0x20,R30
                 ; 0000 0052     UBRRL=0x67;
0000b9 e6e7      	LDI  R30,LOW(103)
0000ba b9e9      	OUT  0x9,R30
                 ; 0000 0053 
                 ; 0000 0054     // Alphanumeric LCD initialization
                 ; 0000 0055     // Connections specified in the
                 ; 0000 0056     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0057     // RS - PORTA Bit 0
                 ; 0000 0058     // RD - PORTA Bit 1
                 ; 0000 0059     // EN - PORTA Bit 2
                 ; 0000 005A     // D4 - PORTA Bit 4
                 ; 0000 005B     // D5 - PORTA Bit 5
                 ; 0000 005C     // D6 - PORTA Bit 6
                 ; 0000 005D     // D7 - PORTA Bit 7
                 ; 0000 005E     // Characters/line: 16
                 ; 0000 005F     //lcd_init(16);
                 ; 0000 0060 
                 ; 0000 0061     DDRB |= (1<<1);        //set PB1 to output [attached to sonar trig]
0000bb 9ab9      	SBI  0x17,1
                 ; 0000 0062 
                 ; 0000 0063     TIMSK=0x04;            //enable timer overflow interupt
0000bc e0e4      	LDI  R30,LOW(4)
0000bd bfe9      	OUT  0x39,R30
                 ; 0000 0064     //#asm("cli")
                 ; 0000 0065     while(1)
                 _0x5:
                 ; 0000 0066     {
                 ; 0000 0067     printf("salam");
                +
0000be e6ea     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000bf e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000c0 93fa      	ST   -Y,R31
0000c1 93ea      	ST   -Y,R30
0000c2 e080      	LDI  R24,0
0000c3 940e 0247 	CALL _printf
0000c5 9622      	ADIW R28,2
                 ; 0000 0068         trig();
0000c6 d031      	RCALL _trig
                 ; 0000 0069         #asm("sei")             //enable interupts
0000c7 9478      	sei
                 ; 0000 006A         while(sonarBusy);       //goes to INT1 when sonar sends pulse (PD3 INT1 rising edge)
                 _0x8:
0000c8 2077      	TST  R7
0000c9 f7f1      	BRNE _0x8
                 ; 0000 006B         if(sonarDataValid){
0000ca 2066      	TST  R6
0000cb f121      	BREQ _0xB
                 ; 0000 006C             #asm("cli")         //disable interupts (there might be a noise signal which takes the program
0000cc 94f8      	cli
                 ; 0000 006D                                 // to INT1 again before previous calculations are done)
                 ; 0000 006E             distance = counterVal/16.0;     //micro seconds that took the signal to come back to the sonar since it was transmitted
0000cd 01f2      	MOVW R30,R4
0000ce 2766      	CLR  R22
0000cf 2777      	CLR  R23
0000d0 940e 02ec 	CALL __CDF1
0000d2 01df      	MOVW R26,R30
0000d3 01cb      	MOVW R24,R22
                +
0000d4 e0e0     +LDI R30 , LOW ( 0x41800000 )
0000d5 e0f0     +LDI R31 , HIGH ( 0x41800000 )
0000d6 e860     +LDI R22 , BYTE3 ( 0x41800000 )
0000d7 e471     +LDI R23 , BYTE4 ( 0x41800000 )
                 	__GETD1N 0x41800000
0000d8 940e 0283 	CALL SUBOPT_0x0
                 ; 0000 006F             distance = distance/56.0;       //calculating distance => try 58 (for temperature 23)
0000da 940e 037c 	CALL __GETD2S0
                +
0000dc e0e0     +LDI R30 , LOW ( 0x42600000 )
0000dd e0f0     +LDI R31 , HIGH ( 0x42600000 )
0000de e660     +LDI R22 , BYTE3 ( 0x42600000 )
0000df e472     +LDI R23 , BYTE4 ( 0x42600000 )
                 	__GETD1N 0x42600000
0000e0 940e 0283 	CALL SUBOPT_0x0
                 ; 0000 0070             printf("d: %f\n\r",distance);
                +
0000e2 e7e0     +LDI R30 , LOW ( 2 * _0x0 + ( 6 ) )
0000e3 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 6 ) )
                 	__POINTW1FN _0x0,6
0000e4 93fa      	ST   -Y,R31
0000e5 93ea      	ST   -Y,R30
                +
0000e6 81ea     +LDD R30 , Y + 2
0000e7 81fb     +LDD R31 , Y + 2 + 1
0000e8 816c     +LDD R22 , Y + 2 + 2
0000e9 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
0000ea 940e 0386 	CALL __PUTPARD1
0000ec e084      	LDI  R24,4
0000ed 940e 0247 	CALL _printf
0000ef 9626      	ADIW R28,6
                 ; 0000 0071         }
                 ; 0000 0072         delay_ms(500);
                 _0xB:
0000f0 efe4      	LDI  R30,LOW(500)
0000f1 e0f1      	LDI  R31,HIGH(500)
0000f2 93fa      	ST   -Y,R31
0000f3 93ea      	ST   -Y,R30
0000f4 940e 02b1 	CALL _delay_ms
                 ; 0000 0073     }
0000f6 cfc7      	RJMP _0x5
                 ; 0000 0074     /*
                 ; 0000 0075     while(1){
                 ; 0000 0076         printf("salam");
                 ; 0000 0077         delay_ms(500);
                 ; 0000 0078     }
                 ; 0000 0079     */
                 ; 0000 007A }
                 _0xC:
0000f7 cfff      	RJMP _0xC
                 ;
                 ;void trig(){                 //aparently this sonar triggers on the low level
                 ; 0000 007C void trig(){
                 _trig:
                 ; 0000 007D     PORTB &= ~(1<<1);       //set bit 1 to 0
0000f8 98c1      	CBI  0x18,1
                 ; 0000 007E     delay_us(20);
                +
0000f9 e68b     +LDI R24 , LOW ( 107 )
                +__DELAY_USB_LOOP :
0000fa 958a     +DEC R24
0000fb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 107
                 ; 0000 007F     PORTB |= (1<<1);        //set bit 1 to 1
0000fc 9ac1      	SBI  0x18,1
                 ; 0000 0080     sonarBusy = 1;
0000fd e0e1      	LDI  R30,LOW(1)
0000fe 2e7e      	MOV  R7,R30
                 ; 0000 0081 }
0000ff 9508      	RET
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 putchar0:
000100 9b5d           sbis usr,udre
000101 cffe           rjmp putchar0
000102 81e8           ld   r30,y
000103 b9ec           out  udr,r30
000104 9621      	ADIW R28,1
000105 9508      	RET
                 _put_usart_G100:
000106 81ea      	LDD  R30,Y+2
000107 93ea      	ST   -Y,R30
000108 dff7      	RCALL _putchar
000109 81a8      	LD   R26,Y
00010a 81b9      	LDD  R27,Y+1
00010b 91ed      	LD   R30,X+
00010c 91fd      	LD   R31,X+
00010d 9631      	ADIW R30,1
00010e 93fe      	ST   -X,R31
00010f 93ee      	ST   -X,R30
000110 9623      	ADIW R28,3
000111 9508      	RET
                 __print_G100:
000112 9726      	SBIW R28,6
000113 940e 038b 	CALL __SAVELOCR6
000115 e010      	LDI  R17,0
000116 85ac      	LDD  R26,Y+12
000117 85bd      	LDD  R27,Y+12+1
000118 e0e0      	LDI  R30,LOW(0)
000119 e0f0      	LDI  R31,HIGH(0)
00011a 93ed      	ST   X+,R30
00011b 93fc      	ST   X,R31
                 _0x2000016:
00011c 89ea      	LDD  R30,Y+18
00011d 89fb      	LDD  R31,Y+18+1
00011e 9631      	ADIW R30,1
00011f 8bea      	STD  Y+18,R30
000120 8bfb      	STD  Y+18+1,R31
000121 9731      	SBIW R30,1
000122 91e4      	LPM  R30,Z
000123 2f2e      	MOV  R18,R30
000124 30e0      	CPI  R30,0
000125 f411      	BRNE PC+3
000126 940c 023f 	JMP _0x2000018
000128 2fe1      	MOV  R30,R17
000129 30e0      	CPI  R30,0
00012a f439      	BRNE _0x200001C
00012b 3225      	CPI  R18,37
00012c f411      	BRNE _0x200001D
00012d e011      	LDI  R17,LOW(1)
00012e c002      	RJMP _0x200001E
                 _0x200001D:
00012f 940e 0288 	CALL SUBOPT_0x1
                 _0x200001E:
000131 c10c      	RJMP _0x200001B
                 _0x200001C:
000132 30e1      	CPI  R30,LOW(0x1)
000133 f4a9      	BRNE _0x200001F
000134 3225      	CPI  R18,37
000135 f419      	BRNE _0x2000020
000136 940e 0288 	CALL SUBOPT_0x1
000138 c104      	RJMP _0x20000C9
                 _0x2000020:
000139 e012      	LDI  R17,LOW(2)
00013a e040      	LDI  R20,LOW(0)
00013b e000      	LDI  R16,LOW(0)
00013c 322d      	CPI  R18,45
00013d f411      	BRNE _0x2000021
00013e e001      	LDI  R16,LOW(1)
00013f c0fe      	RJMP _0x200001B
                 _0x2000021:
000140 322b      	CPI  R18,43
000141 f411      	BRNE _0x2000022
000142 e24b      	LDI  R20,LOW(43)
000143 c0fa      	RJMP _0x200001B
                 _0x2000022:
000144 3220      	CPI  R18,32
000145 f411      	BRNE _0x2000023
000146 e240      	LDI  R20,LOW(32)
000147 c0f6      	RJMP _0x200001B
                 _0x2000023:
000148 c002      	RJMP _0x2000024
                 _0x200001F:
000149 30e2      	CPI  R30,LOW(0x2)
00014a f439      	BRNE _0x2000025
                 _0x2000024:
00014b e050      	LDI  R21,LOW(0)
00014c e013      	LDI  R17,LOW(3)
00014d 3320      	CPI  R18,48
00014e f411      	BRNE _0x2000026
00014f 6800      	ORI  R16,LOW(128)
000150 c0ed      	RJMP _0x200001B
                 _0x2000026:
000151 c004      	RJMP _0x2000027
                 _0x2000025:
000152 30e3      	CPI  R30,LOW(0x3)
000153 f011      	BREQ PC+3
000154 940c 023e 	JMP _0x200001B
                 _0x2000027:
000156 3320      	CPI  R18,48
000157 f010      	BRLO _0x200002A
000158 332a      	CPI  R18,58
000159 f008      	BRLO _0x200002B
                 _0x200002A:
00015a c007      	RJMP _0x2000029
                 _0x200002B:
00015b e0aa      	LDI  R26,LOW(10)
00015c 9f5a      	MUL  R21,R26
00015d 2d50      	MOV  R21,R0
00015e 2fe2      	MOV  R30,R18
00015f 53e0      	SUBI R30,LOW(48)
000160 0f5e      	ADD  R21,R30
000161 c0dc      	RJMP _0x200001B
                 _0x2000029:
000162 2fe2      	MOV  R30,R18
000163 36e3      	CPI  R30,LOW(0x63)
000164 f449      	BRNE _0x200002F
000165 940e 0291 	CALL SUBOPT_0x2
000167 89e8      	LDD  R30,Y+16
000168 89f9      	LDD  R31,Y+16+1
000169 81a4      	LDD  R26,Z+4
00016a 93aa      	ST   -Y,R26
00016b 940e 0297 	CALL SUBOPT_0x3
00016d c0cf      	RJMP _0x2000030
                 _0x200002F:
00016e 37e3      	CPI  R30,LOW(0x73)
00016f f441      	BRNE _0x2000032
000170 940e 0291 	CALL SUBOPT_0x2
000172 940e 029f 	CALL SUBOPT_0x4
000174 940e 026e 	CALL _strlen
000176 2f1e      	MOV  R17,R30
000177 c00a      	RJMP _0x2000033
                 _0x2000032:
000178 37e0      	CPI  R30,LOW(0x70)
000179 f461      	BRNE _0x2000035
00017a 940e 0291 	CALL SUBOPT_0x2
00017c 940e 029f 	CALL SUBOPT_0x4
00017e 940e 0278 	CALL _strlenf
000180 2f1e      	MOV  R17,R30
000181 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000182 6002      	ORI  R16,LOW(2)
000183 770f      	ANDI R16,LOW(127)
000184 e030      	LDI  R19,LOW(0)
000185 c035      	RJMP _0x2000036
                 _0x2000035:
000186 36e4      	CPI  R30,LOW(0x64)
000187 f011      	BREQ _0x2000039
000188 36e9      	CPI  R30,LOW(0x69)
000189 f411      	BRNE _0x200003A
                 _0x2000039:
00018a 6004      	ORI  R16,LOW(4)
00018b c002      	RJMP _0x200003B
                 _0x200003A:
00018c 37e5      	CPI  R30,LOW(0x75)
00018d f431      	BRNE _0x200003C
                 _0x200003B:
00018e e5e4      	LDI  R30,LOW(_tbl10_G100*2)
00018f e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000190 83ee      	STD  Y+6,R30
000191 83ff      	STD  Y+6+1,R31
000192 e015      	LDI  R17,LOW(5)
000193 c00d      	RJMP _0x200003D
                 _0x200003C:
000194 35e8      	CPI  R30,LOW(0x58)
000195 f411      	BRNE _0x200003F
000196 6008      	ORI  R16,LOW(8)
000197 c004      	RJMP _0x2000040
                 _0x200003F:
000198 37e8      	CPI  R30,LOW(0x78)
000199 f011      	BREQ PC+3
00019a 940c 023d 	JMP _0x2000071
                 _0x2000040:
00019c e5ee      	LDI  R30,LOW(_tbl16_G100*2)
00019d e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
00019e 83ee      	STD  Y+6,R30
00019f 83ff      	STD  Y+6+1,R31
0001a0 e014      	LDI  R17,LOW(4)
                 _0x200003D:
0001a1 ff02      	SBRS R16,2
0001a2 c014      	RJMP _0x2000042
0001a3 940e 0291 	CALL SUBOPT_0x2
0001a5 940e 02a9 	CALL SUBOPT_0x5
0001a7 85ab      	LDD  R26,Y+11
0001a8 23aa      	TST  R26
0001a9 f43a      	BRPL _0x2000043
0001aa 85ea      	LDD  R30,Y+10
0001ab 85fb      	LDD  R31,Y+10+1
0001ac 940e 0363 	CALL __ANEGW1
0001ae 87ea      	STD  Y+10,R30
0001af 87fb      	STD  Y+10+1,R31
0001b0 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0001b1 3040      	CPI  R20,0
0001b2 f011      	BREQ _0x2000044
0001b3 5f1f      	SUBI R17,-LOW(1)
0001b4 c001      	RJMP _0x2000045
                 _0x2000044:
0001b5 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0001b6 c004      	RJMP _0x2000046
                 _0x2000042:
0001b7 940e 0291 	CALL SUBOPT_0x2
0001b9 940e 02a9 	CALL SUBOPT_0x5
                 _0x2000046:
                 _0x2000036:
0001bb fd00      	SBRC R16,0
0001bc c011      	RJMP _0x2000047
                 _0x2000048:
0001bd 1715      	CP   R17,R21
0001be f478      	BRSH _0x200004A
0001bf ff07      	SBRS R16,7
0001c0 c008      	RJMP _0x200004B
0001c1 ff02      	SBRS R16,2
0001c2 c004      	RJMP _0x200004C
0001c3 7f0b      	ANDI R16,LOW(251)
0001c4 2f24      	MOV  R18,R20
0001c5 5011      	SUBI R17,LOW(1)
0001c6 c001      	RJMP _0x200004D
                 _0x200004C:
0001c7 e320      	LDI  R18,LOW(48)
                 _0x200004D:
0001c8 c001      	RJMP _0x200004E
                 _0x200004B:
0001c9 e220      	LDI  R18,LOW(32)
                 _0x200004E:
0001ca 940e 0288 	CALL SUBOPT_0x1
0001cc 5051      	SUBI R21,LOW(1)
0001cd cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0001ce 2f31      	MOV  R19,R17
0001cf ff01      	SBRS R16,1
0001d0 c017      	RJMP _0x200004F
                 _0x2000050:
0001d1 3030      	CPI  R19,0
0001d2 f0a1      	BREQ _0x2000052
0001d3 ff03      	SBRS R16,3
0001d4 c006      	RJMP _0x2000053
0001d5 81ee      	LDD  R30,Y+6
0001d6 81ff      	LDD  R31,Y+6+1
0001d7 9125      	LPM  R18,Z+
0001d8 83ee      	STD  Y+6,R30
0001d9 83ff      	STD  Y+6+1,R31
0001da c005      	RJMP _0x2000054
                 _0x2000053:
0001db 81ae      	LDD  R26,Y+6
0001dc 81bf      	LDD  R27,Y+6+1
0001dd 912d      	LD   R18,X+
0001de 83ae      	STD  Y+6,R26
0001df 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0001e0 940e 0288 	CALL SUBOPT_0x1
0001e2 3050      	CPI  R21,0
0001e3 f009      	BREQ _0x2000055
0001e4 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0001e5 5031      	SUBI R19,LOW(1)
0001e6 cfea      	RJMP _0x2000050
                 _0x2000052:
0001e7 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0001e8 e320      	LDI  R18,LOW(48)
0001e9 81ee      	LDD  R30,Y+6
0001ea 81ff      	LDD  R31,Y+6+1
0001eb 940e 0378 	CALL __GETW1PF
0001ed 87e8      	STD  Y+8,R30
0001ee 87f9      	STD  Y+8+1,R31
0001ef 81ee      	LDD  R30,Y+6
0001f0 81ff      	LDD  R31,Y+6+1
0001f1 9632      	ADIW R30,2
0001f2 83ee      	STD  Y+6,R30
0001f3 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0001f4 85e8      	LDD  R30,Y+8
0001f5 85f9      	LDD  R31,Y+8+1
0001f6 85aa      	LDD  R26,Y+10
0001f7 85bb      	LDD  R27,Y+10+1
0001f8 17ae      	CP   R26,R30
0001f9 07bf      	CPC  R27,R31
0001fa f050      	BRLO _0x200005C
0001fb 5f2f      	SUBI R18,-LOW(1)
0001fc 85a8      	LDD  R26,Y+8
0001fd 85b9      	LDD  R27,Y+8+1
0001fe 85ea      	LDD  R30,Y+10
0001ff 85fb      	LDD  R31,Y+10+1
000200 1bea      	SUB  R30,R26
000201 0bfb      	SBC  R31,R27
000202 87ea      	STD  Y+10,R30
000203 87fb      	STD  Y+10+1,R31
000204 cfef      	RJMP _0x200005A
                 _0x200005C:
000205 332a      	CPI  R18,58
000206 f028      	BRLO _0x200005D
000207 ff03      	SBRS R16,3
000208 c002      	RJMP _0x200005E
000209 5f29      	SUBI R18,-LOW(7)
00020a c001      	RJMP _0x200005F
                 _0x200005E:
00020b 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
00020c fd04      	SBRC R16,4
00020d c01a      	RJMP _0x2000061
00020e 3321      	CPI  R18,49
00020f f420      	BRSH _0x2000063
000210 85a8      	LDD  R26,Y+8
000211 85b9      	LDD  R27,Y+8+1
000212 9711      	SBIW R26,1
000213 f409      	BRNE _0x2000062
                 _0x2000063:
000214 c009      	RJMP _0x20000CA
                 _0x2000062:
000215 1753      	CP   R21,R19
000216 f010      	BRLO _0x2000067
000217 ff00      	SBRS R16,0
000218 c001      	RJMP _0x2000068
                 _0x2000067:
000219 c013      	RJMP _0x2000066
                 _0x2000068:
00021a e220      	LDI  R18,LOW(32)
00021b ff07      	SBRS R16,7
00021c c00b      	RJMP _0x2000069
00021d e320      	LDI  R18,LOW(48)
                 _0x20000CA:
00021e 6100      	ORI  R16,LOW(16)
00021f ff02      	SBRS R16,2
000220 c007      	RJMP _0x200006A
000221 7f0b      	ANDI R16,LOW(251)
000222 934a      	ST   -Y,R20
000223 940e 0297 	CALL SUBOPT_0x3
000225 3050      	CPI  R21,0
000226 f009      	BREQ _0x200006B
000227 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000228 940e 0288 	CALL SUBOPT_0x1
00022a 3050      	CPI  R21,0
00022b f009      	BREQ _0x200006C
00022c 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
00022d 5031      	SUBI R19,LOW(1)
00022e 85a8      	LDD  R26,Y+8
00022f 85b9      	LDD  R27,Y+8+1
000230 9712      	SBIW R26,2
000231 f008      	BRLO _0x2000059
000232 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000233 ff00      	SBRS R16,0
000234 c008      	RJMP _0x200006D
                 _0x200006E:
000235 3050      	CPI  R21,0
000236 f031      	BREQ _0x2000070
000237 5051      	SUBI R21,LOW(1)
000238 e2e0      	LDI  R30,LOW(32)
000239 93ea      	ST   -Y,R30
00023a 940e 0297 	CALL SUBOPT_0x3
00023c cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000C9:
00023d e010      	LDI  R17,LOW(0)
                 _0x200001B:
00023e cedd      	RJMP _0x2000016
                 _0x2000018:
00023f 85ac      	LDD  R26,Y+12
000240 85bd      	LDD  R27,Y+12+1
000241 940e 0374 	CALL __GETW1P
000243 940e 0392 	CALL __LOADLOCR6
000245 9664      	ADIW R28,20
000246 9508      	RET
                 _printf:
000247 92ff      	PUSH R15
000248 2ef8      	MOV  R15,R24
000249 9726      	SBIW R28,6
00024a 931a      	ST   -Y,R17
00024b 930a      	ST   -Y,R16
00024c 01de      	MOVW R26,R28
00024d 9614      	ADIW R26,4
00024e 940e 035f 	CALL __ADDW2R15
000250 018d      	MOVW R16,R26
000251 e0e0      	LDI  R30,LOW(0)
000252 83ec      	STD  Y+4,R30
000253 83ed      	STD  Y+4+1,R30
000254 83ee      	STD  Y+6,R30
000255 83ef      	STD  Y+6+1,R30
000256 01de      	MOVW R26,R28
000257 9618      	ADIW R26,8
000258 940e 035f 	CALL __ADDW2R15
00025a 940e 0374 	CALL __GETW1P
00025c 93fa      	ST   -Y,R31
00025d 93ea      	ST   -Y,R30
00025e 931a      	ST   -Y,R17
00025f 930a      	ST   -Y,R16
000260 e0e6      	LDI  R30,LOW(_put_usart_G100)
000261 e0f1      	LDI  R31,HIGH(_put_usart_G100)
000262 93fa      	ST   -Y,R31
000263 93ea      	ST   -Y,R30
000264 01fe      	MOVW R30,R28
000265 9638      	ADIW R30,8
000266 93fa      	ST   -Y,R31
000267 93ea      	ST   -Y,R30
000268 dea9      	RCALL __print_G100
000269 8119      	LDD  R17,Y+1
00026a 8108      	LDD  R16,Y+0
00026b 9628      	ADIW R28,8
00026c 90ff      	POP  R15
00026d 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
00026e 91a9          ld   r26,y+
00026f 91b9          ld   r27,y+
000270 27ee          clr  r30
000271 27ff          clr  r31
                 strlen0:
000272 916d          ld   r22,x+
000273 2366          tst  r22
000274 f011          breq strlen1
000275 9631          adiw r30,1
000276 cffb          rjmp strlen0
                 strlen1:
000277 9508          ret
                 _strlenf:
000278 27aa          clr  r26
000279 27bb          clr  r27
00027a 91e9          ld   r30,y+
00027b 91f9          ld   r31,y+
                 strlenf0:
00027c 9005      	lpm  r0,z+
00027d 2000          tst  r0
00027e f011          breq strlenf1
00027f 9611          adiw r26,1
000280 cffb          rjmp strlenf0
                 strlenf1:
000281 01fd          movw r30,r26
000282 9508          ret
                 
                 	.DSEG
                 _intFlag_S0000000000:
000260           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000283 940e 031a 	CALL __DIVF21
000285 940e 0381 	CALL __PUTD1S0
000287 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x1:
000288 932a      	ST   -Y,R18
000289 85ed      	LDD  R30,Y+13
00028a 85fe      	LDD  R31,Y+13+1
00028b 93fa      	ST   -Y,R31
00028c 93ea      	ST   -Y,R30
00028d 89e9      	LDD  R30,Y+17
00028e 89fa      	LDD  R31,Y+17+1
00028f 9509      	ICALL
000290 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
000291 89e8      	LDD  R30,Y+16
000292 89f9      	LDD  R31,Y+16+1
000293 9734      	SBIW R30,4
000294 8be8      	STD  Y+16,R30
000295 8bf9      	STD  Y+16+1,R31
000296 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3:
000297 85ed      	LDD  R30,Y+13
000298 85fe      	LDD  R31,Y+13+1
000299 93fa      	ST   -Y,R31
00029a 93ea      	ST   -Y,R30
00029b 89e9      	LDD  R30,Y+17
00029c 89fa      	LDD  R31,Y+17+1
00029d 9509      	ICALL
00029e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4:
00029f 89a8      	LDD  R26,Y+16
0002a0 89b9      	LDD  R27,Y+16+1
0002a1 9614      	ADIW R26,4
0002a2 940e 0374 	CALL __GETW1P
0002a4 83ee      	STD  Y+6,R30
0002a5 83ff      	STD  Y+6+1,R31
0002a6 93fa      	ST   -Y,R31
0002a7 93ea      	ST   -Y,R30
0002a8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
0002a9 89a8      	LDD  R26,Y+16
0002aa 89b9      	LDD  R27,Y+16+1
0002ab 9614      	ADIW R26,4
0002ac 940e 0374 	CALL __GETW1P
0002ae 87ea      	STD  Y+10,R30
0002af 87fb      	STD  Y+10+1,R31
0002b0 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0002b1 91e9      	ld   r30,y+
0002b2 91f9      	ld   r31,y+
0002b3 9630      	adiw r30,0
0002b4 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0002b5 ea80     +LDI R24 , LOW ( 0xFA0 )
0002b6 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
0002b7 9701     +SBIW R24 , 1
0002b8 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
0002b9 95a8      	wdr
0002ba 9731      	sbiw r30,1
0002bb f7c9      	brne __delay_ms0
                 __delay_ms1:
0002bc 9508      	ret
                 
                 __ROUND_REPACK:
0002bd 2355      	TST  R21
0002be f442      	BRPL __REPACK
0002bf 3850      	CPI  R21,0x80
0002c0 f411      	BRNE __ROUND_REPACK0
0002c1 ffe0      	SBRS R30,0
0002c2 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0002c3 9631      	ADIW R30,1
0002c4 1f69      	ADC  R22,R25
0002c5 1f79      	ADC  R23,R25
0002c6 f06b      	BRVS __REPACK1
                 
                 __REPACK:
0002c7 e850      	LDI  R21,0x80
0002c8 2757      	EOR  R21,R23
0002c9 f411      	BRNE __REPACK0
0002ca 935f      	PUSH R21
0002cb c03c      	RJMP __ZERORES
                 __REPACK0:
0002cc 3f5f      	CPI  R21,0xFF
0002cd f031      	BREQ __REPACK1
0002ce 0f66      	LSL  R22
0002cf 0c00      	LSL  R0
0002d0 9557      	ROR  R21
0002d1 9567      	ROR  R22
0002d2 2f75      	MOV  R23,R21
0002d3 9508      	RET
                 __REPACK1:
0002d4 935f      	PUSH R21
0002d5 2000      	TST  R0
0002d6 f00a      	BRMI __REPACK2
0002d7 c03c      	RJMP __MAXRES
                 __REPACK2:
0002d8 c035      	RJMP __MINRES
                 
                 __UNPACK:
0002d9 e850      	LDI  R21,0x80
0002da 2e19      	MOV  R1,R25
0002db 2215      	AND  R1,R21
0002dc 0f88      	LSL  R24
0002dd 1f99      	ROL  R25
0002de 2795      	EOR  R25,R21
0002df 0f55      	LSL  R21
0002e0 9587      	ROR  R24
                 
                 __UNPACK1:
0002e1 e850      	LDI  R21,0x80
0002e2 2e07      	MOV  R0,R23
0002e3 2205      	AND  R0,R21
0002e4 0f66      	LSL  R22
0002e5 1f77      	ROL  R23
0002e6 2775      	EOR  R23,R21
0002e7 0f55      	LSL  R21
0002e8 9567      	ROR  R22
0002e9 9508      	RET
                 
                 __CDF1U:
0002ea 9468      	SET
0002eb c001      	RJMP __CDF1U0
                 __CDF1:
0002ec 94e8      	CLT
                 __CDF1U0:
0002ed 9730      	SBIW R30,0
0002ee 4060      	SBCI R22,0
0002ef 4070      	SBCI R23,0
0002f0 f0b1      	BREQ __CDF10
0002f1 2400      	CLR  R0
0002f2 f026      	BRTS __CDF11
0002f3 2377      	TST  R23
0002f4 f412      	BRPL __CDF11
0002f5 9400      	COM  R0
0002f6 d070      	RCALL __ANEGD1
                 __CDF11:
0002f7 2e17      	MOV  R1,R23
0002f8 e17e      	LDI  R23,30
0002f9 2011      	TST  R1
                 __CDF12:
0002fa f032      	BRMI __CDF13
0002fb 957a      	DEC  R23
0002fc 0fee      	LSL  R30
0002fd 1fff      	ROL  R31
0002fe 1f66      	ROL  R22
0002ff 1c11      	ROL  R1
000300 cff9      	RJMP __CDF12
                 __CDF13:
000301 2fef      	MOV  R30,R31
000302 2ff6      	MOV  R31,R22
000303 2d61      	MOV  R22,R1
000304 935f      	PUSH R21
000305 dfc1      	RCALL __REPACK
000306 915f      	POP  R21
                 __CDF10:
000307 9508      	RET
                 
                 __ZERORES:
000308 27ee      	CLR  R30
000309 27ff      	CLR  R31
00030a 2766      	CLR  R22
00030b 2777      	CLR  R23
00030c 915f      	POP  R21
00030d 9508      	RET
                 
                 __MINRES:
00030e efef      	SER  R30
00030f efff      	SER  R31
000310 e76f      	LDI  R22,0x7F
000311 ef7f      	SER  R23
000312 915f      	POP  R21
000313 9508      	RET
                 
                 __MAXRES:
000314 efef      	SER  R30
000315 efff      	SER  R31
000316 e76f      	LDI  R22,0x7F
000317 e77f      	LDI  R23,0x7F
000318 915f      	POP  R21
000319 9508      	RET
                 
                 __DIVF21:
00031a 935f      	PUSH R21
00031b dfbd      	RCALL __UNPACK
00031c 3870      	CPI  R23,0x80
00031d f421      	BRNE __DIVF210
00031e 2011      	TST  R1
                 __DIVF211:
00031f f40a      	BRPL __DIVF219
000320 cfed      	RJMP __MINRES
                 __DIVF219:
000321 cff2      	RJMP __MAXRES
                 __DIVF210:
000322 3890      	CPI  R25,0x80
000323 f409      	BRNE __DIVF218
                 __DIVF217:
000324 cfe3      	RJMP __ZERORES
                 __DIVF218:
000325 2401      	EOR  R0,R1
000326 9408      	SEC
000327 0b97      	SBC  R25,R23
000328 f41b      	BRVC __DIVF216
000329 f3d4      	BRLT __DIVF217
00032a 2000      	TST  R0
00032b cff3      	RJMP __DIVF211
                 __DIVF216:
00032c 2f79      	MOV  R23,R25
00032d 931f      	PUSH R17
00032e 932f      	PUSH R18
00032f 933f      	PUSH R19
000330 934f      	PUSH R20
000331 2411      	CLR  R1
000332 2711      	CLR  R17
000333 2722      	CLR  R18
000334 2733      	CLR  R19
000335 2744      	CLR  R20
000336 2755      	CLR  R21
000337 e290      	LDI  R25,32
                 __DIVF212:
000338 17ae      	CP   R26,R30
000339 07bf      	CPC  R27,R31
00033a 0786      	CPC  R24,R22
00033b 0741      	CPC  R20,R17
00033c f030      	BRLO __DIVF213
00033d 1bae      	SUB  R26,R30
00033e 0bbf      	SBC  R27,R31
00033f 0b86      	SBC  R24,R22
000340 0b41      	SBC  R20,R17
000341 9408      	SEC
000342 c001      	RJMP __DIVF214
                 __DIVF213:
000343 9488      	CLC
                 __DIVF214:
000344 1f55      	ROL  R21
000345 1f22      	ROL  R18
000346 1f33      	ROL  R19
000347 1c11      	ROL  R1
000348 1faa      	ROL  R26
000349 1fbb      	ROL  R27
00034a 1f88      	ROL  R24
00034b 1f44      	ROL  R20
00034c 959a      	DEC  R25
00034d f751      	BRNE __DIVF212
00034e 01f9      	MOVW R30,R18
00034f 2d61      	MOV  R22,R1
000350 914f      	POP  R20
000351 913f      	POP  R19
000352 912f      	POP  R18
000353 911f      	POP  R17
000354 2366      	TST  R22
000355 f032      	BRMI __DIVF215
000356 0f55      	LSL  R21
000357 1fee      	ROL  R30
000358 1fff      	ROL  R31
000359 1f66      	ROL  R22
00035a 957a      	DEC  R23
00035b f243      	BRVS __DIVF217
                 __DIVF215:
00035c df60      	RCALL __ROUND_REPACK
00035d 915f      	POP  R21
00035e 9508      	RET
                 
                 __ADDW2R15:
00035f 2400      	CLR  R0
000360 0daf      	ADD  R26,R15
000361 1db0      	ADC  R27,R0
000362 9508      	RET
                 
                 __ANEGW1:
000363 95f1      	NEG  R31
000364 95e1      	NEG  R30
000365 40f0      	SBCI R31,0
000366 9508      	RET
                 
                 __ANEGD1:
000367 95f0      	COM  R31
000368 9560      	COM  R22
000369 9570      	COM  R23
00036a 95e1      	NEG  R30
00036b 4fff      	SBCI R31,-1
00036c 4f6f      	SBCI R22,-1
00036d 4f7f      	SBCI R23,-1
00036e 9508      	RET
                 
                 __CWD1:
00036f 2f6f      	MOV  R22,R31
000370 0f66      	ADD  R22,R22
000371 0b66      	SBC  R22,R22
000372 2f76      	MOV  R23,R22
000373 9508      	RET
                 
                 __GETW1P:
000374 91ed      	LD   R30,X+
000375 91fc      	LD   R31,X
000376 9711      	SBIW R26,1
000377 9508      	RET
                 
                 __GETW1PF:
000378 9005      	LPM  R0,Z+
000379 91f4      	LPM  R31,Z
00037a 2de0      	MOV  R30,R0
00037b 9508      	RET
                 
                 __GETD2S0:
00037c 81a8      	LD   R26,Y
00037d 81b9      	LDD  R27,Y+1
00037e 818a      	LDD  R24,Y+2
00037f 819b      	LDD  R25,Y+3
000380 9508      	RET
                 
                 __PUTD1S0:
000381 83e8      	ST   Y,R30
000382 83f9      	STD  Y+1,R31
000383 836a      	STD  Y+2,R22
000384 837b      	STD  Y+3,R23
000385 9508      	RET
                 
                 __PUTPARD1:
000386 937a      	ST   -Y,R23
000387 936a      	ST   -Y,R22
000388 93fa      	ST   -Y,R31
000389 93ea      	ST   -Y,R30
00038a 9508      	RET
                 
                 __SAVELOCR6:
00038b 935a      	ST   -Y,R21
                 __SAVELOCR5:
00038c 934a      	ST   -Y,R20
                 __SAVELOCR4:
00038d 933a      	ST   -Y,R19
                 __SAVELOCR3:
00038e 932a      	ST   -Y,R18
                 __SAVELOCR2:
00038f 931a      	ST   -Y,R17
000390 930a      	ST   -Y,R16
000391 9508      	RET
                 
                 __LOADLOCR6:
000392 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000393 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000394 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000395 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000396 8119      	LDD  R17,Y+1
000397 8108      	LD   R16,Y
000398 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  19 r1 :  12 r2 :   0 r3 :   0 r4 :   2 r5 :   1 r6 :   3 r7 :   4 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  30 r17:  24 r18:  32 r19:  12 r20:  15 r21:  44 r22:  36 r23:  27 
r24:  21 r25:  14 r26:  42 r27:  22 r28:  13 r29:   1 r30: 192 r31:  78 
x  :  13 y  : 148 z  :  13 
Registers used: 26 out of 35 (74.3%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   3 
adiw  :  18 and   :   2 andi  :   4 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  16 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 
brlt  :   1 brmi  :   3 brne  :  30 brpl  :   4 brsh  :   2 brtc  :   0 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   0 call  :  39 
cbi   :   1 cbr   :   0 clc   :   1 clh   :   0 cli   :   2 cln   :   0 
clr   :  23 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   4 
cp    :   4 cpc   :   4 cpi   :  34 cpse  :   0 dec   :   5 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   5 inc   :   0 jmp   :  25 ld    :  20 ldd   :  62 ldi   :  91 
lds   :   1 lpm   :  14 lsl   :   8 lsr   :   0 mov   :  24 movw  :  12 
mul   :   1 muls  :   0 mulsu :   0 neg   :   3 nop   :   0 or    :   0 
ori   :   7 out   :  37 pop   :  10 push  :   9 rcall :   7 ret   :  32 
reti  :   2 rjmp  :  62 rol   :  16 ror   :   4 sbc   :   6 sbci  :   6 
sbi   :   2 sbic  :   0 sbis  :   1 sbiw  :  14 sbr   :   0 sbrc  :   2 
sbrs  :  11 sec   :   2 seh   :   0 sei   :   1 sen   :   0 ser   :   5 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  49 std   :  31 sts   :   2 sub   :   2 subi  :  13 swap  :   0 
tst   :  12 wdr   :   1 
Instructions used: 68 out of 116 (58.6%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000732   1798     44   1842   32768   5.6%
[.dseg] 0x000060 0x000261      0      1      1    2143   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 3 warnings
