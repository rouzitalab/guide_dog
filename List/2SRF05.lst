
AVRASM ver. 2.1.30  D:\My Stuff\Academic\Final Project\Alireza's Project\List\2SRF05.asm Tue Feb 24 19:19:00 2015

D:\My Stuff\Academic\Final Project\Alireza's Project\List\2SRF05.asm(1072): warning: Register r4 already defined by the .DEF directive
D:\My Stuff\Academic\Final Project\Alireza's Project\List\2SRF05.asm(1073): warning: Register r7 already defined by the .DEF directive
D:\My Stuff\Academic\Final Project\Alireza's Project\List\2SRF05.asm(1074): warning: Register r6 already defined by the .DEF directive
D:\My Stuff\Academic\Final Project\Alireza's Project\List\2SRF05.asm(1075): warning: Register r9 already defined by the .DEF directive
D:\My Stuff\Academic\Final Project\Alireza's Project\List\2SRF05.asm(1076): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.3 Standard
                 ;(C) Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega32
                 ;Program type             : Application
                 ;Clock frequency          : 16.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : float, width, precision
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 512 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;Global 'const' stored in FLASH     : No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions         : On
                 ;Smart register allocation          : On
                 ;Automatic register allocation      : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2143
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _counterVal=R4
                 	.DEF _sonar1Busy=R7
                 	.DEF _sonar2Busy=R6
                 	.DEF _sonar1DataValid=R9
                 	.DEF _sonar2DataValid=R8
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003d 	JMP  __RESET
000002 940c 008c 	JMP  _ext_int0_isr
000004 940c 006d 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 00af 	JMP  _timer1_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x24:
00002a 0000
00002b 0000
D:\My Stuff\Academic\Final Project\Alireza's Project\List\2SRF05.asm(1108): warning: .cseg .db misalignment - padding zero byte
00002c 0000      	.DB  0x0,0x0,0x0,0x0,0x0
                 _0x2000000:
00002d 4e2d
00002e 4e41
D:\My Stuff\Academic\Final Project\Alireza's Project\List\2SRF05.asm(1110): warning: .cseg .db misalignment - padding zero byte
00002f 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 _0x2080060:
D:\My Stuff\Academic\Final Project\Alireza's Project\List\2SRF05.asm(1112): warning: .cseg .db misalignment - padding zero byte
000030 0001      	.DB  0x1
                 _0x2080000:
000031 4e2d
000032 4e41
000033 4900
000034 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\My Stuff\Academic\Final Project\Alireza's Project\List\2SRF05.asm(1115): warning: .cseg .db misalignment - padding zero byte
000035 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000036 0005      	.DW  0x05
000037 0004      	.DW  0x04
000038 0054      	.DW  _0x24*2
                 
000039 0001      	.DW  0x01
00003a 0262      	.DW  __seed_G104
00003b 0060      	.DW  _0x2080060*2
                 
                 _0xFFFFFFFF:
00003c 0000      	.DW  0
                 
                 __RESET:
00003d 94f8      	CLI
00003e 27ee      	CLR  R30
00003f bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000040 e0f1      	LDI  R31,1
000041 bffb      	OUT  GICR,R31
000042 bfeb      	OUT  GICR,R30
000043 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000044 e1f8      	LDI  R31,0x18
000045 bdf1      	OUT  WDTCR,R31
000046 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000047 e08d      	LDI  R24,(14-2)+1
000048 e0a2      	LDI  R26,2
000049 27bb      	CLR  R27
                 __CLEAR_REG:
00004a 93ed      	ST   X+,R30
00004b 958a      	DEC  R24
00004c f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004d e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004e e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004f e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000050 93ed      	ST   X+,R30
000051 9701      	SBIW R24,1
000052 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000053 e6ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000054 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000055 9185      	LPM  R24,Z+
000056 9195      	LPM  R25,Z+
000057 9700      	SBIW R24,0
000058 f061      	BREQ __GLOBAL_INI_END
000059 91a5      	LPM  R26,Z+
00005a 91b5      	LPM  R27,Z+
00005b 9005      	LPM  R0,Z+
00005c 9015      	LPM  R1,Z+
00005d 01bf      	MOVW R22,R30
00005e 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005f 9005      	LPM  R0,Z+
000060 920d      	ST   X+,R0
000061 9701      	SBIW R24,1
000062 f7e1      	BRNE __GLOBAL_INI_LOOP
000063 01fb      	MOVW R30,R22
000064 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000065 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000066 bfed      	OUT  SPL,R30
000067 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000068 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000069 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006a e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006b 940c 00fb 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;//#include <alcd.h>
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;
                 ;unsigned int counterVal = 0;
                 ;char sonar1Busy, sonar2Busy = 0;
                 ;char sonar1DataValid, sonar2DataValid = 0;
                 ;
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 000B {
                 
                 	.CSEG
                 _ext_int1_isr:
00006d 93ea      	ST   -Y,R30
00006e 93fa      	ST   -Y,R31
00006f b7ef      	IN   R30,SREG
000070 93ea      	ST   -Y,R30
                 ; 0000 000C     static char intFlag = 0;
                 ; 0000 000D     if(!intFlag){
000071 91e0 0260 	LDS  R30,_intFlag_S0000000000
000073 30e0      	CPI  R30,0
000074 f449      	BRNE _0x3
                 ; 0000 000E         MCUCR &= ~(1<<2);         //setting INT1 on the falling edge       => check with MCUCR = 0x08 (original 0x0b)
000075 b7e5      	IN   R30,0x35
000076 7feb      	ANDI R30,0xFB
000077 bfe5      	OUT  0x35,R30
                 ; 0000 000F         intFlag = 1;
000078 e0e1      	LDI  R30,LOW(1)
000079 93e0 0260 	STS  _intFlag_S0000000000,R30
                 ; 0000 0010         TCNT1 = 0x00;         // the TCNT1 register is cleared  (increments with each clock pulse)
00007b 940e 0133 	CALL SUBOPT_0x0
                 ; 0000 0011         TCCR1B = 0x01;        // timer/counter enabled [frequency set to Xtal freq (16MHz)]
                 ; 0000 0012     }else{
00007d c00d      	RJMP _0x4
                 _0x3:
                 ; 0000 0013         TCCR1B = 0x00;        // timer/counter disabled
00007e e0e0      	LDI  R30,LOW(0)
00007f bdee      	OUT  0x2E,R30
                 ; 0000 0014         MCUCR |= (1<<2);
000080 b7e5      	IN   R30,0x35
000081 60e4      	ORI  R30,4
000082 bfe5      	OUT  0x35,R30
                 ; 0000 0015         intFlag = 0;
000083 e0e0      	LDI  R30,LOW(0)
000084 93e0 0260 	STS  _intFlag_S0000000000,R30
                 ; 0000 0016         counterVal = TCNT1;
                +
000086 b44c     +IN R4 , 44
000087 b45d     +IN R5 , 44 + 1
                 	__INWR 4,5,44
                 ; 0000 0017         sonar1Busy = 0;
000088 2477      	CLR  R7
                 ; 0000 0018         sonar1DataValid = 1;
000089 e0e1      	LDI  R30,LOW(1)
00008a 2e9e      	MOV  R9,R30
                 ; 0000 0019     }
                 _0x4:
                 ; 0000 001A }
00008b c01e      	RJMP _0x23
                 ;
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 001D {
                 _ext_int0_isr:
00008c 93ea      	ST   -Y,R30
00008d 93fa      	ST   -Y,R31
00008e b7ef      	IN   R30,SREG
00008f 93ea      	ST   -Y,R30
                 ; 0000 001E     static char intFlag = 0;
                 ; 0000 001F     if(!intFlag){
000090 91e0 0261 	LDS  R30,_intFlag_S0000001000
000092 30e0      	CPI  R30,0
000093 f449      	BRNE _0x5
                 ; 0000 0020         MCUCR &= ~(1<<0);         //setting INT0 on the falling edge
000094 b7e5      	IN   R30,0x35
000095 7fee      	ANDI R30,0xFE
000096 bfe5      	OUT  0x35,R30
                 ; 0000 0021         intFlag = 1;
000097 e0e1      	LDI  R30,LOW(1)
000098 93e0 0261 	STS  _intFlag_S0000001000,R30
                 ; 0000 0022         TCNT1 = 0x00;         // the TCNT1 register is cleared  (increments with each clock pulse)
00009a 940e 0133 	CALL SUBOPT_0x0
                 ; 0000 0023         TCCR1B = 0x01;        // timer/counter enabled [frequency set to Xtal freq (16MHz)]
                 ; 0000 0024     }else{
00009c c00d      	RJMP _0x6
                 _0x5:
                 ; 0000 0025         TCCR1B = 0x00;        // timer/counter disabled
00009d e0e0      	LDI  R30,LOW(0)
00009e bdee      	OUT  0x2E,R30
                 ; 0000 0026         MCUCR |= (1<<0);
00009f b7e5      	IN   R30,0x35
0000a0 60e1      	ORI  R30,1
0000a1 bfe5      	OUT  0x35,R30
                 ; 0000 0027         intFlag = 0;
0000a2 e0e0      	LDI  R30,LOW(0)
0000a3 93e0 0261 	STS  _intFlag_S0000001000,R30
                 ; 0000 0028         counterVal = TCNT1;
                +
0000a5 b44c     +IN R4 , 44
0000a6 b45d     +IN R5 , 44 + 1
                 	__INWR 4,5,44
                 ; 0000 0029         sonar2Busy = 0;
0000a7 2466      	CLR  R6
                 ; 0000 002A         sonar2DataValid = 1;
0000a8 e0e1      	LDI  R30,LOW(1)
0000a9 2e8e      	MOV  R8,R30
                 ; 0000 002B     }
                 _0x6:
                 ; 0000 002C }
                 _0x23:
0000aa 91e9      	LD   R30,Y+
0000ab bfef      	OUT  SREG,R30
0000ac 91f9      	LD   R31,Y+
0000ad 91e9      	LD   R30,Y+
0000ae 9518      	RETI
                 ;
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)      /// bayad shart bezarim ke befahme kodoomo 0 kone      ***???***
                 ; 0000 002F {
                 _timer1_ovf_isr:
0000af 93ea      	ST   -Y,R30
0000b0 b7ef      	IN   R30,SREG
                 ; 0000 0030     sonar1Busy = 0;
0000b1 2477      	CLR  R7
                 ; 0000 0031     sonar1DataValid = 0;
0000b2 2499      	CLR  R9
                 ; 0000 0032     sonar2Busy = 0;
0000b3 2466      	CLR  R6
                 ; 0000 0033     sonar2DataValid = 0;
0000b4 2488      	CLR  R8
                 ; 0000 0034 }
0000b5 bfef      	OUT  SREG,R30
0000b6 91e9      	LD   R30,Y+
0000b7 9518      	RETI
                 ;
                 ;void trig1(){                 //aparently this sonar triggers on the low level
                 ; 0000 0036 void trig1(){
                 _trig1:
                 ; 0000 0037     PORTB &= ~(1<<0);       //set bit 0 to 0
0000b8 98c0      	CBI  0x18,0
                 ; 0000 0038     delay_us(20);
                +
0000b9 e68b     +LDI R24 , LOW ( 107 )
                +__DELAY_USB_LOOP :
0000ba 958a     +DEC R24
0000bb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 107
                 ; 0000 0039     PORTB |= (1<<0);        //set bit 0 to 1
0000bc 9ac0      	SBI  0x18,0
                 ; 0000 003A     sonar1Busy = 1;
0000bd e0e1      	LDI  R30,LOW(1)
0000be 2e7e      	MOV  R7,R30
                 ; 0000 003B }
0000bf 9508      	RET
                 ;void trig2(){                 //aparently this sonar triggers on the low level
                 ; 0000 003C void trig2(){
                 _trig2:
                 ; 0000 003D     PORTB &= ~(1<<1);       //set bit 1 to 0
0000c0 98c1      	CBI  0x18,1
                 ; 0000 003E     delay_us(20);
                +
0000c1 e68b     +LDI R24 , LOW ( 107 )
                +__DELAY_USB_LOOP :
0000c2 958a     +DEC R24
0000c3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 107
                 ; 0000 003F     PORTB |= (1<<1);        //set bit 1 to 1
0000c4 9ac1      	SBI  0x18,1
                 ; 0000 0040     sonar2Busy = 1;
0000c5 e0e1      	LDI  R30,LOW(1)
0000c6 2e6e      	MOV  R6,R30
                 ; 0000 0041 }
0000c7 9508      	RET
                 ;
                 ;void move(char direction)
                 ; 0000 0044 {
                 _move:
                 ; 0000 0045     if(direction == 'l') PORTC = 0b00001010;
0000c8 93aa      	ST   -Y,R26
                 ;	direction -> Y+0
0000c9 81a8      	LD   R26,Y
0000ca 36ac      	CPI  R26,LOW(0x6C)
0000cb f411      	BRNE _0x7
0000cc e0ea      	LDI  R30,LOW(10)
0000cd c00e      	RJMP _0x22
                 ; 0000 0046     else if(direction == 'r') PORTC = 0b00000101;
                 _0x7:
0000ce 81a8      	LD   R26,Y
0000cf 37a2      	CPI  R26,LOW(0x72)
0000d0 f411      	BRNE _0x9
0000d1 e0e5      	LDI  R30,LOW(5)
0000d2 c009      	RJMP _0x22
                 ; 0000 0047     else if(direction == 'f') PORTC = 0b00001001;
                 _0x9:
0000d3 81a8      	LD   R26,Y
0000d4 36a6      	CPI  R26,LOW(0x66)
0000d5 f411      	BRNE _0xB
0000d6 e0e9      	LDI  R30,LOW(9)
0000d7 c004      	RJMP _0x22
                 ; 0000 0048     else if(direction == 'b') PORTC = 0b00000110;
                 _0xB:
0000d8 81a8      	LD   R26,Y
0000d9 36a2      	CPI  R26,LOW(0x62)
0000da f411      	BRNE _0xD
0000db e0e6      	LDI  R30,LOW(6)
                 _0x22:
0000dc bbe5      	OUT  0x15,R30
                 ; 0000 0049 }
                 _0xD:
0000dd 9621      	ADIW R28,1
0000de 9508      	RET
                 ;
                 ;float dist_calc(unsigned char sonar_num)
                 ; 0000 004C {
                 _dist_calc:
                 ; 0000 004D     float distance;
                 ; 0000 004E     if (sonar_num == 1)
0000df 93aa      	ST   -Y,R26
0000e0 9724      	SBIW R28,4
                 ;	sonar_num -> Y+4
                 ;	distance -> Y+0
0000e1 81ac      	LDD  R26,Y+4
0000e2 30a1      	CPI  R26,LOW(0x1)
0000e3 f451      	BRNE _0xE
                 ; 0000 004F     {
                 ; 0000 0050         trig1();
0000e4 dfd3      	RCALL _trig1
                 ; 0000 0051         #asm("sei")
0000e5 9478      	sei
                 ; 0000 0052         while(sonar1Busy);
                 _0xF:
0000e6 2077      	TST  R7
0000e7 f7f1      	BRNE _0xF
                 ; 0000 0053         if(sonar1DataValid){
0000e8 2099      	TST  R9
0000e9 f019      	BREQ _0x12
                 ; 0000 0054             #asm("cli")
0000ea 94f8      	cli
                 ; 0000 0055             distance = counterVal/16.0;
0000eb 940e 013a 	CALL SUBOPT_0x1
                 ; 0000 0056             distance = distance/56.0;
                 ; 0000 0057         }
                 ; 0000 0058     }
                 _0x12:
                 ; 0000 0059     else
0000ed c009      	RJMP _0x13
                 _0xE:
                 ; 0000 005A     {
                 ; 0000 005B         trig2();
0000ee dfd1      	RCALL _trig2
                 ; 0000 005C         #asm("sei")
0000ef 9478      	sei
                 ; 0000 005D         while(sonar2Busy);
                 _0x14:
0000f0 2066      	TST  R6
0000f1 f7f1      	BRNE _0x14
                 ; 0000 005E         if(sonar2DataValid){
0000f2 2088      	TST  R8
0000f3 f019      	BREQ _0x17
                 ; 0000 005F             #asm("cli")
0000f4 94f8      	cli
                 ; 0000 0060             distance = counterVal/16.0;
0000f5 940e 013a 	CALL SUBOPT_0x1
                 ; 0000 0061             distance = distance/56.0;
                 ; 0000 0062         }
                 ; 0000 0063     }
                 _0x17:
                 _0x13:
                 ; 0000 0064     return distance;
0000f7 940e 023f 	CALL __GETD1S0
0000f9 9625      	ADIW R28,5
0000fa 9508      	RET
                 ; 0000 0065 }
                 ;
                 ;void main(void)
                 ; 0000 0068 {
                 _main:
                 ; 0000 0069 
                 ; 0000 006A     // Input/Output Ports initialization
                 ; 0000 006B     // Port A initialization
                 ; 0000 006C     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 006D     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 006E     PORTA=0x00;
0000fb e0e0      	LDI  R30,LOW(0)
0000fc bbeb      	OUT  0x1B,R30
                 ; 0000 006F     DDRA=0x00;
0000fd bbea      	OUT  0x1A,R30
                 ; 0000 0070 
                 ; 0000 0071     // Port B initialization
                 ; 0000 0072     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=Out
                 ; 0000 0073     // State7=T State6=T State5=T State4=T State3=T State2=T State1=0 State0=0
                 ; 0000 0074     PORTB=0x00;
0000fe bbe8      	OUT  0x18,R30
                 ; 0000 0075     DDRB=0x03;
0000ff e0e3      	LDI  R30,LOW(3)
000100 bbe7      	OUT  0x17,R30
                 ; 0000 0076 
                 ; 0000 0077     // Port C initialization
                 ; 0000 0078     // Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=Out Func1=Out Func0=Out
                 ; 0000 0079     // State7=T State6=T State5=T State4=T State3=0 State2=0 State1=0 State0=0
                 ; 0000 007A     PORTC=0x00;
000101 e0e0      	LDI  R30,LOW(0)
000102 bbe5      	OUT  0x15,R30
                 ; 0000 007B     DDRC=0x0F;
000103 e0ef      	LDI  R30,LOW(15)
000104 bbe4      	OUT  0x14,R30
                 ; 0000 007C 
                 ; 0000 007D     // Port D initialization
                 ; 0000 007E     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 007F     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0080     PORTD=0x00;
000105 e0e0      	LDI  R30,LOW(0)
000106 bbe2      	OUT  0x12,R30
                 ; 0000 0081     DDRD=0x00;
000107 bbe1      	OUT  0x11,R30
                 ; 0000 0082 
                 ; 0000 0083     // Timer/Counter 1 initialization
                 ; 0000 0084     // Clock source: System Clock
                 ; 0000 0085     // Clock value: Timer1 Stopped
                 ; 0000 0086     // Mode: Normal top=0xFFFF
                 ; 0000 0087     // OC1A output: Discon.
                 ; 0000 0088     // OC1B output: Discon.
                 ; 0000 0089     // Noise Canceler: Off
                 ; 0000 008A     // Input Capture on Falling Edge
                 ; 0000 008B     // Timer1 Overflow Interrupt: Off
                 ; 0000 008C     // Input Capture Interrupt: Off
                 ; 0000 008D     // Compare A Match Interrupt: Off
                 ; 0000 008E     // Compare B Match Interrupt: Off
                 ; 0000 008F     TCCR1A=0x00;
000108 bdef      	OUT  0x2F,R30
                 ; 0000 0090     TCCR1B=0x00;
000109 bdee      	OUT  0x2E,R30
                 ; 0000 0091     TCNT1H=0x00;
00010a bded      	OUT  0x2D,R30
                 ; 0000 0092     TCNT1L=0x00;
00010b bdec      	OUT  0x2C,R30
                 ; 0000 0093     ICR1H=0x00;
00010c bde7      	OUT  0x27,R30
                 ; 0000 0094     ICR1L=0x00;
00010d bde6      	OUT  0x26,R30
                 ; 0000 0095     OCR1AH=0x00;
00010e bdeb      	OUT  0x2B,R30
                 ; 0000 0096     OCR1AL=0x00;
00010f bdea      	OUT  0x2A,R30
                 ; 0000 0097     OCR1BH=0x00;
000110 bde9      	OUT  0x29,R30
                 ; 0000 0098     OCR1BL=0x00;
000111 bde8      	OUT  0x28,R30
                 ; 0000 0099 
                 ; 0000 009A     // External Interrupt(s) initialization
                 ; 0000 009B     // INT0: On
                 ; 0000 009C     // INT1: On
                 ; 0000 009D     // INT1 Mode: Rising Edge
                 ; 0000 009E     // INT2: Off
                 ; 0000 009F     GICR|=0xC0;                    //enable INT1 and INT0
000112 b7eb      	IN   R30,0x3B
000113 6ce0      	ORI  R30,LOW(0xC0)
000114 bfeb      	OUT  0x3B,R30
                 ; 0000 00A0     MCUCR=0x0F;                    // set both on rising edge
000115 e0ef      	LDI  R30,LOW(15)
000116 bfe5      	OUT  0x35,R30
                 ; 0000 00A1     MCUCSR=0x00;
000117 e0e0      	LDI  R30,LOW(0)
000118 bfe4      	OUT  0x34,R30
                 ; 0000 00A2     GIFR=0xC0;                     // INT1 and INT0 FLAG
000119 ece0      	LDI  R30,LOW(192)
00011a bfea      	OUT  0x3A,R30
                 ; 0000 00A3 
                 ; 0000 00A4     DDRB |= (1<<0);        //set PB0 to output [attached to sonar1 trig]
00011b 9ab8      	SBI  0x17,0
                 ; 0000 00A5     DDRB |= (1<<1);        //set PB1 to output [attached to sonar2 trig]
00011c 9ab9      	SBI  0x17,1
                 ; 0000 00A6 
                 ; 0000 00A7     TIMSK=0x04;            //enable timer overflow interupt
00011d e0e4      	LDI  R30,LOW(4)
00011e bfe9      	OUT  0x39,R30
                 ; 0000 00A8 
                 ; 0000 00A9     while(1)
                 _0x18:
                 ; 0000 00AA     {
                 ; 0000 00AB      /******************mesal***************/
                 ; 0000 00AC      move('f');
00011f e6a6      	LDI  R26,LOW(102)
000120 dfa7      	RCALL _move
                 ; 0000 00AD      while(dist_calc(1)<20);
                 _0x1B:
000121 940e 0154 	CALL SUBOPT_0x2
000123 f3e8      	BRLO _0x1B
                 ; 0000 00AE      while(dist_calc(1)<20)
                 _0x1E:
000124 940e 0154 	CALL SUBOPT_0x2
000126 f450      	BRSH _0x20
                 ; 0000 00AF      {
                 ; 0000 00B0          move('r');
000127 e7a2      	LDI  R26,LOW(114)
000128 940e 0160 	CALL SUBOPT_0x3
                 ; 0000 00B1          delay_ms(100);
                 ; 0000 00B2          move('f');
00012a e6a6      	LDI  R26,LOW(102)
00012b 940e 0160 	CALL SUBOPT_0x3
                 ; 0000 00B3          delay_ms(100);
                 ; 0000 00B4          move('l');
00012d e6ac      	LDI  R26,LOW(108)
00012e 940e 0160 	CALL SUBOPT_0x3
                 ; 0000 00B5          delay_ms(100);
                 ; 0000 00B6      }
000130 cff3      	RJMP _0x1E
                 _0x20:
                 ; 0000 00B7     }
000131 cfed      	RJMP _0x18
                 ; 0000 00B8 
                 ; 0000 00B9 }
                 _0x21:
000132 cfff      	RJMP _0x21
                 ;
                 ;        /*
                 ;        trig2();
                 ;        #asm("sei")             //enable interupts
                 ;        while(sonar2Busy);       //goes to INT0 when sonar sends pulse (PD4 INT0 rising edge)
                 ;        if(sonar2DataValid){
                 ;            #asm("cli")         //disable interupts (there might be a noise signal which takes the program
                 ;                                // to an interupt routine again before previous calculations are done)
                 ;            distance2 = counterVal/16.0;     //micro seconds that took the signal to come back to the sonar since it was transmitted
                 ;            distance2 = distance2/56.0;       //calculating distance => try 58 (for temperature 23)
                 ;            printf("d2: %f\n\r",distance2);
                 ;        }
                 ;        */
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _intFlag_S0000000000:
000260           	.BYTE 0x1
                 _intFlag_S0000001000:
000261           	.BYTE 0x1
                 __seed_G104:
000262           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000133 e0e0      	LDI  R30,LOW(0)
000134 e0f0      	LDI  R31,HIGH(0)
000135 bdfd      	OUT  0x2C+1,R31
000136 bdec      	OUT  0x2C,R30
000137 e0e1      	LDI  R30,LOW(1)
000138 bdee      	OUT  0x2E,R30
000139 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:26 WORDS
                 SUBOPT_0x1:
00013a 01f2      	MOVW R30,R4
00013b 2766      	CLR  R22
00013c 2777      	CLR  R23
00013d 940e 019f 	CALL __CDF1
00013f 01df      	MOVW R26,R30
000140 01cb      	MOVW R24,R22
                +
000141 e0e0     +LDI R30 , LOW ( 0x41800000 )
000142 e0f0     +LDI R31 , HIGH ( 0x41800000 )
000143 e860     +LDI R22 , BYTE3 ( 0x41800000 )
000144 e471     +LDI R23 , BYTE4 ( 0x41800000 )
                 	__GETD1N 0x41800000
000145 940e 01cd 	CALL __DIVF21
000147 940e 0249 	CALL __PUTD1S0
000149 940e 0244 	CALL __GETD2S0
                +
00014b e0e0     +LDI R30 , LOW ( 0x42600000 )
00014c e0f0     +LDI R31 , HIGH ( 0x42600000 )
00014d e660     +LDI R22 , BYTE3 ( 0x42600000 )
00014e e472     +LDI R23 , BYTE4 ( 0x42600000 )
                 	__GETD1N 0x42600000
00014f 940e 01cd 	CALL __DIVF21
000151 940e 0249 	CALL __PUTD1S0
000153 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x2:
000154 e0a1      	LDI  R26,LOW(1)
000155 940e 00df 	CALL _dist_calc
000157 01df      	MOVW R26,R30
000158 01cb      	MOVW R24,R22
                +
000159 e0e0     +LDI R30 , LOW ( 0x41A00000 )
00015a e0f0     +LDI R31 , HIGH ( 0x41A00000 )
00015b ea60     +LDI R22 , BYTE3 ( 0x41A00000 )
00015c e471     +LDI R23 , BYTE4 ( 0x41A00000 )
                 	__GETD1N 0x41A00000
00015d 940e 0212 	CALL __CMPF12
00015f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
000160 940e 00c8 	CALL _move
000162 e6a4      	LDI  R26,LOW(100)
000163 e0b0      	LDI  R27,0
000164 940c 0166 	JMP  _delay_ms
                 
                 
                 	.CSEG
                 _delay_ms:
000166 9610      	adiw r26,0
000167 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000168 ea80     +LDI R24 , LOW ( 0xFA0 )
000169 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
00016a 9701     +SBIW R24 , 1
00016b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
00016c 95a8      	wdr
00016d 9711      	sbiw r26,1
00016e f7c9      	brne __delay_ms0
                 __delay_ms1:
00016f 9508      	ret
                 
                 __ROUND_REPACK:
000170 2355      	TST  R21
000171 f442      	BRPL __REPACK
000172 3850      	CPI  R21,0x80
000173 f411      	BRNE __ROUND_REPACK0
000174 ffe0      	SBRS R30,0
000175 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000176 9631      	ADIW R30,1
000177 1f69      	ADC  R22,R25
000178 1f79      	ADC  R23,R25
000179 f06b      	BRVS __REPACK1
                 
                 __REPACK:
00017a e850      	LDI  R21,0x80
00017b 2757      	EOR  R21,R23
00017c f411      	BRNE __REPACK0
00017d 935f      	PUSH R21
00017e c03c      	RJMP __ZERORES
                 __REPACK0:
00017f 3f5f      	CPI  R21,0xFF
000180 f031      	BREQ __REPACK1
000181 0f66      	LSL  R22
000182 0c00      	LSL  R0
000183 9557      	ROR  R21
000184 9567      	ROR  R22
000185 2f75      	MOV  R23,R21
000186 9508      	RET
                 __REPACK1:
000187 935f      	PUSH R21
000188 2000      	TST  R0
000189 f00a      	BRMI __REPACK2
00018a c03c      	RJMP __MAXRES
                 __REPACK2:
00018b c035      	RJMP __MINRES
                 
                 __UNPACK:
00018c e850      	LDI  R21,0x80
00018d 2e19      	MOV  R1,R25
00018e 2215      	AND  R1,R21
00018f 0f88      	LSL  R24
000190 1f99      	ROL  R25
000191 2795      	EOR  R25,R21
000192 0f55      	LSL  R21
000193 9587      	ROR  R24
                 
                 __UNPACK1:
000194 e850      	LDI  R21,0x80
000195 2e07      	MOV  R0,R23
000196 2205      	AND  R0,R21
000197 0f66      	LSL  R22
000198 1f77      	ROL  R23
000199 2775      	EOR  R23,R21
00019a 0f55      	LSL  R21
00019b 9567      	ROR  R22
00019c 9508      	RET
                 
                 __CDF1U:
00019d 9468      	SET
00019e c001      	RJMP __CDF1U0
                 __CDF1:
00019f 94e8      	CLT
                 __CDF1U0:
0001a0 9730      	SBIW R30,0
0001a1 4060      	SBCI R22,0
0001a2 4070      	SBCI R23,0
0001a3 f0b1      	BREQ __CDF10
0001a4 2400      	CLR  R0
0001a5 f026      	BRTS __CDF11
0001a6 2377      	TST  R23
0001a7 f412      	BRPL __CDF11
0001a8 9400      	COM  R0
0001a9 d088      	RCALL __ANEGD1
                 __CDF11:
0001aa 2e17      	MOV  R1,R23
0001ab e17e      	LDI  R23,30
0001ac 2011      	TST  R1
                 __CDF12:
0001ad f032      	BRMI __CDF13
0001ae 957a      	DEC  R23
0001af 0fee      	LSL  R30
0001b0 1fff      	ROL  R31
0001b1 1f66      	ROL  R22
0001b2 1c11      	ROL  R1
0001b3 cff9      	RJMP __CDF12
                 __CDF13:
0001b4 2fef      	MOV  R30,R31
0001b5 2ff6      	MOV  R31,R22
0001b6 2d61      	MOV  R22,R1
0001b7 935f      	PUSH R21
0001b8 dfc1      	RCALL __REPACK
0001b9 915f      	POP  R21
                 __CDF10:
0001ba 9508      	RET
                 
                 __ZERORES:
0001bb 27ee      	CLR  R30
0001bc 27ff      	CLR  R31
0001bd 2766      	CLR  R22
0001be 2777      	CLR  R23
0001bf 915f      	POP  R21
0001c0 9508      	RET
                 
                 __MINRES:
0001c1 efef      	SER  R30
0001c2 efff      	SER  R31
0001c3 e76f      	LDI  R22,0x7F
0001c4 ef7f      	SER  R23
0001c5 915f      	POP  R21
0001c6 9508      	RET
                 
                 __MAXRES:
0001c7 efef      	SER  R30
0001c8 efff      	SER  R31
0001c9 e76f      	LDI  R22,0x7F
0001ca e77f      	LDI  R23,0x7F
0001cb 915f      	POP  R21
0001cc 9508      	RET
                 
                 __DIVF21:
0001cd 935f      	PUSH R21
0001ce dfbd      	RCALL __UNPACK
0001cf 3870      	CPI  R23,0x80
0001d0 f421      	BRNE __DIVF210
0001d1 2011      	TST  R1
                 __DIVF211:
0001d2 f40a      	BRPL __DIVF219
0001d3 cfed      	RJMP __MINRES
                 __DIVF219:
0001d4 cff2      	RJMP __MAXRES
                 __DIVF210:
0001d5 3890      	CPI  R25,0x80
0001d6 f409      	BRNE __DIVF218
                 __DIVF217:
0001d7 cfe3      	RJMP __ZERORES
                 __DIVF218:
0001d8 2401      	EOR  R0,R1
0001d9 9408      	SEC
0001da 0b97      	SBC  R25,R23
0001db f41b      	BRVC __DIVF216
0001dc f3d4      	BRLT __DIVF217
0001dd 2000      	TST  R0
0001de cff3      	RJMP __DIVF211
                 __DIVF216:
0001df 2f79      	MOV  R23,R25
0001e0 931f      	PUSH R17
0001e1 932f      	PUSH R18
0001e2 933f      	PUSH R19
0001e3 934f      	PUSH R20
0001e4 2411      	CLR  R1
0001e5 2711      	CLR  R17
0001e6 2722      	CLR  R18
0001e7 2733      	CLR  R19
0001e8 2744      	CLR  R20
0001e9 2755      	CLR  R21
0001ea e290      	LDI  R25,32
                 __DIVF212:
0001eb 17ae      	CP   R26,R30
0001ec 07bf      	CPC  R27,R31
0001ed 0786      	CPC  R24,R22
0001ee 0741      	CPC  R20,R17
0001ef f030      	BRLO __DIVF213
0001f0 1bae      	SUB  R26,R30
0001f1 0bbf      	SBC  R27,R31
0001f2 0b86      	SBC  R24,R22
0001f3 0b41      	SBC  R20,R17
0001f4 9408      	SEC
0001f5 c001      	RJMP __DIVF214
                 __DIVF213:
0001f6 9488      	CLC
                 __DIVF214:
0001f7 1f55      	ROL  R21
0001f8 1f22      	ROL  R18
0001f9 1f33      	ROL  R19
0001fa 1c11      	ROL  R1
0001fb 1faa      	ROL  R26
0001fc 1fbb      	ROL  R27
0001fd 1f88      	ROL  R24
0001fe 1f44      	ROL  R20
0001ff 959a      	DEC  R25
000200 f751      	BRNE __DIVF212
000201 01f9      	MOVW R30,R18
000202 2d61      	MOV  R22,R1
000203 914f      	POP  R20
000204 913f      	POP  R19
000205 912f      	POP  R18
000206 911f      	POP  R17
000207 2366      	TST  R22
000208 f032      	BRMI __DIVF215
000209 0f55      	LSL  R21
00020a 1fee      	ROL  R30
00020b 1fff      	ROL  R31
00020c 1f66      	ROL  R22
00020d 957a      	DEC  R23
00020e f243      	BRVS __DIVF217
                 __DIVF215:
00020f df60      	RCALL __ROUND_REPACK
000210 915f      	POP  R21
000211 9508      	RET
                 
                 __CMPF12:
000212 2399      	TST  R25
000213 f09a      	BRMI __CMPF120
000214 2377      	TST  R23
000215 f042      	BRMI __CMPF121
000216 1797      	CP   R25,R23
000217 f048      	BRLO __CMPF122
000218 f429      	BRNE __CMPF121
000219 17ae      	CP   R26,R30
00021a 07bf      	CPC  R27,R31
00021b 0786      	CPC  R24,R22
00021c f020      	BRLO __CMPF122
00021d f031      	BREQ __CMPF123
                 __CMPF121:
00021e 9498      	CLZ
00021f 9488      	CLC
000220 9508      	RET
                 __CMPF122:
000221 9498      	CLZ
000222 9408      	SEC
000223 9508      	RET
                 __CMPF123:
000224 9418      	SEZ
000225 9488      	CLC
000226 9508      	RET
                 __CMPF120:
000227 2377      	TST  R23
000228 f7c2      	BRPL __CMPF122
000229 1797      	CP   R25,R23
00022a f398      	BRLO __CMPF121
00022b f7a9      	BRNE __CMPF122
00022c 17ea      	CP   R30,R26
00022d 07fb      	CPC  R31,R27
00022e 0768      	CPC  R22,R24
00022f f388      	BRLO __CMPF122
000230 f399      	BREQ __CMPF123
000231 cfec      	RJMP __CMPF121
                 
                 __ANEGD1:
000232 95f0      	COM  R31
000233 9560      	COM  R22
000234 9570      	COM  R23
000235 95e1      	NEG  R30
000236 4fff      	SBCI R31,-1
000237 4f6f      	SBCI R22,-1
000238 4f7f      	SBCI R23,-1
000239 9508      	RET
                 
                 __CWD1:
00023a 2f6f      	MOV  R22,R31
00023b 0f66      	ADD  R22,R22
00023c 0b66      	SBC  R22,R22
00023d 2f76      	MOV  R23,R22
00023e 9508      	RET
                 
                 __GETD1S0:
00023f 81e8      	LD   R30,Y
000240 81f9      	LDD  R31,Y+1
000241 816a      	LDD  R22,Y+2
000242 817b      	LDD  R23,Y+3
000243 9508      	RET
                 
                 __GETD2S0:
000244 81a8      	LD   R26,Y
000245 81b9      	LDD  R27,Y+1
000246 818a      	LDD  R24,Y+2
000247 819b      	LDD  R25,Y+3
000248 9508      	RET
                 
                 __PUTD1S0:
000249 83e8      	ST   Y,R30
00024a 83f9      	STD  Y+1,R31
00024b 836a      	STD  Y+2,R22
00024c 837b      	STD  Y+3,R23
00024d 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  12 r1 :  12 r2 :   0 r3 :   0 r4 :   3 r5 :   2 r6 :   4 r7 :   4 
r8 :   3 r9 :   3 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   5 r18:   5 r19:   4 r20:   6 r21:  27 r22:  37 r23:  31 
r24:  23 r25:  17 r26:  31 r27:   9 r28:   4 r29:   1 r30: 130 r31:  29 
x  :   3 y  :  30 z  :   7 
Registers used: 26 out of 35 (74.3%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   1 
adiw  :   4 and   :   2 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   8 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 
brlt  :   1 brmi  :   5 brne  :  23 brpl  :   4 brsh  :   1 brtc  :   0 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   0 call  :  19 
cbi   :   2 cbr   :   0 clc   :   3 clh   :   0 cli   :   3 cln   :   0 
clr   :  21 cls   :   0 clt   :   1 clv   :   0 clz   :   2 com   :   4 
cp    :   5 cpc   :   7 cpi   :  11 cpse  :   0 dec   :   6 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  12 inc   :   0 jmp   :  23 ld    :  10 ldd   :   7 ldi   :  70 
lds   :   2 lpm   :   7 lsl   :   8 lsr   :   0 mov   :  15 movw  :   9 
mul   :   0 muls  :   0 mulsu :   0 neg   :   1 nop   :   0 or    :   0 
ori   :   3 out   :  43 pop   :   9 push  :   8 rcall :   7 ret   :  23 
reti  :   2 rjmp  :  23 rol   :  16 ror   :   4 sbc   :   5 sbci  :   5 
sbi   :   4 sbic  :   0 sbis  :   0 sbiw  :   7 sbr   :   0 sbrc  :   0 
sbrs  :   1 sec   :   3 seh   :   0 sei   :   2 sen   :   0 ser   :   5 
ses   :   0 set   :   1 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    :  13 std   :   3 sts   :   4 sub   :   1 subi  :   0 swap  :   0 
tst   :  14 wdr   :   1 
Instructions used: 65 out of 116 (56.0%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00049c   1142     38   1180   32768   3.6%
[.dseg] 0x000060 0x000266      0      6      6    2143   0.3%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 9 warnings
